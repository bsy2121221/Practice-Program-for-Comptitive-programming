#include <bits/stdc++.h>
using namespace std;

bool isValid(int row, int col, int n, int m){
    if(row<n and row>=0 and col<m and col>=0)
    return true;
    return false;
}

int zombieInfection(vector<vector<int>> &arr){
    queue<pair<int,int>> q ;
    int n=arr.size();
    int m=arr[0].size();
    
    int cur=0,next=0;
    
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(arr[i][j]==1)
            {
                q.push({i,j});
                cur++;
            }
        }
    }
    int time1=0;
    
    while(!q.empty()){
        for(int i=0;i<cur;i++){
            auto u=q.front();
            q.pop();
            int x=u.first, y=u.second;
            next=0;
            if(isValid(x+1,y,n,m) and arr[x+1][y]==0){
                arr[x+1][y]=1;
                q.push({x+1,y});
                next++;
            }
            if(isValid(x-1,y,n,m) and arr[x-1][y]==0){
                arr[x-1][y]=1;
                q.push({x-1,y});
                next++;
            }
            if(isValid(x,y+1,n,m) and arr[x][y+1]==0){
                arr[x][y+1]=1;
                q.push({x,y+1});
                next++;
            }
            if(isValid(x,y-1,n,m) and arr[x][y-1]==0){
                arr[x][y-1]=1;
                q.push({x,y-1});
                next++;
            }
            if(next==0)
                break;
            cur=next;
            time1++;
            
            int counter=0;
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    if(arr[i][j]==0)
                        counter++;
                }
            }
            if(counter==n*m)
            return -1;
            
            
        }
    }
    return time1;
    
}

int main() {
	int row=3, col=3;
	vector<vector<int>> arr={{0,1,0},
	                        {0,0,0},
	                        {0,0,0}};
	 cout<<zombieInfection(arr);
	  
	       
	return 0;
}